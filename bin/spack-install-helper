#!/bin/bash

set -e

# cuda compute capability:
# P100 = 6.0
# A100 = 8.0
# H100 = 9.0

# TODO
# hohgant -> alps

POSSIBLE_TARGETS="daint-gpu daint-mc hohgant-cpu hohgant-nvgpu hohgant-amdgpu"
DEFAULT_VARIANTS="+openmp +mpi build_type=Release"
CUDA_EXTERNAL_DEF=""
ROCM_EXTERNAL_DEF=""
ROCM_ARCH=""

CUDA_EXTERNAL_DEF_TEMPLATE="cuda: {externals: [{spec: cuda@$ALSO_CUDA_VERSION, prefix: /usr/local/cuda}], buildable: false}"
ROCM_EXTERNAL_DEF_TEMPLATE=$(cat <<- EOF
llvm-amdgpu:
      externals:
      - spec: llvm-amdgpu@${ROCM_VERSION} ~rocm-device-libs
        prefix: /opt/rocm-${ROCM_VERSION}/llvm
      buildable: false
    rocm-device-libs:
      externals:
      - spec: rocm-device-libs@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    hip:
      externals:
      - spec: hip@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocblas:
      externals:
      - spec: rocblas@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocsolver:
      externals:
      - spec: rocsolver@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocprim:
      externals:
      - spec: rocprim@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocthrust:
      externals:
      - spec: rocthrust@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    hsa-rocr-dev:
      externals:
      - spec: hsa-rocr-dev@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
EOF
)

case $1 in
    daint-gpu)
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} cuda_arch=60 +cuda"
        CUDA_EXTERNAL_DEF=${CUDA_EXTERNAL_DEF_TEMPLATE}
        TARGET="haswell"
        ;;
    daint-mc)
        TARGET="broadwell"
        ;;
    hohgant-cpu)
        TARGET="zen2" # AMD EPYC 7742 64-Core Processor
        ;;
    hohgant-nvgpu)
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} cuda_arch=80 +cuda" # NVIDIA A100-SXM4-80GB
        CUDA_EXTERNAL_DEF=${CUDA_EXTERNAL_DEF_TEMPLATE}
        TARGET="zen3" # AMD EPYC 7713 64-Core Processor
        ;;
    hohgant-amdgpu)
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} amdgpu_target=gfx90a:xnack- +rocm" # gfx90a (amdgcn-amd-amdhsa--gfx90a:sramecc+:xnack-)
        ROCM_EXTERNAL_DEF=${ROCM_EXTERNAL_DEF_TEMPLATE}
        ROCM_ARCH="gfx90a"
        TARGET="zen3" # TODO AMD EPYC 7A53 64-Core Processor # TODO is it 7A53 or 7453?
        ;;
    *)
        echo "The first argument must be any of '$POSSIBLE_TARGETS'. The rest of the arguments must be valid spack specs"
        exit 1
esac
shift


# at this point the rest of the arguments are supposed to be valid spack sepcs

if [[ -z "${TARGET}" ]] ; then
    echo "There is a bug in $0, because TARGET is empty"
    exit 1
fi

cat - > /dev/shm/enforce_microarchitecture.yaml << EOF
packages:
  all:
    require: target=$TARGET
  mpi:
    require: 'mpich@3.1.4 netmod=tcp device=ch3'
EOF

mkdir /opt/spack-environment
env DEFAULT_VARIANTS="$DEFAULT_VARIANTS" \
    CUDA_EXTERNAL_DEF="$CUDA_EXTERNAL_DEF" \
    ROCM_EXTERNAL_DEF="$ROCM_EXTERNAL_DEF" \
    python3 -c 'import os,sys; sys.stdout.write(os.path.expandvars(sys.stdin.read()))' <  /opt/spack_env.yaml.template > /opt/spack-environment/spack.yaml

spack -e /opt/spack-environment config add -f /dev/shm/enforce_microarchitecture.yaml

spack -e /opt/spack-environment add 'mpich@3.1.4 netmod=tcp device=ch3'
spack -e /opt/spack-environment add "$@"
if [[ -n ${NUM_PROCS} ]] ; then
    spack config add config:build_jobs:${NUM_PROCS}
else
    echo "WARNING: NUM_PROCS is an empty variable. This is not the usual case, and it should be set to the number of processes that you want to use for building the spack software stack."
fi
echo "Using spack environment yaml config:"
cat /opt/spack-environment/spack.yaml

cd /opt/spack-environment
spack -e . gpg trust /tmp/spack_sign_key.gpg || echo 'Warning: Could not add spack sign key, i.e. your packages cannot be added to the buildcache'
spack -e . concretize
spack -e . env depfile | spack-modify-makefile-push-buildcache > Makefile
make -j$NUM_PROCS SPACK_COLOR=always --output-sync=recurse
spack -e . gc -y

# Strip all the binaries
find -L /opt/view/* -type f -exec readlink -f '{}' \; | \
    xargs file -i | \
    grep 'charset=binary' | \
    grep 'x-executable\|x-archive\|x-sharedlib' | \
    awk -F: '{print $1}' | xargs strip -s || true

# Modifications to the environment that are necessary to run
cd /opt/spack-environment
spack env activate --sh -d . >> /etc/profile.d/z10_spack_environment.sh
echo 'export CPATH=/opt/view/include:$CPATH' >> /etc/profile.d/z10_spack_environment.sh
if [ -n "$ROCM_ARCH" ]; then
    HIPCC_COMPILE_FLAGS_APPEND="\"--offload-arch=${ROCM_ARCH}\""
    echo "export HIPCC_COMPILE_FLAGS_APPEND=${HIPCC_COMPILE_FLAGS_APPEND}" >> /etc/profile.d/z11_compiler_flags.sh
fi
