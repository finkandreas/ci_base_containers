#!/usr/bin/env python3

import fileinput
import re
import sys
import subprocess

# In order to speed up building packages with Spack, we use a buildcache. To further optimize the process, we want the following behavior:
# - Install from buildcache
# - If installation from buildcache was not successfull (the package is not in the cache or it is corrupted), build from source
# - Only if the package was built from source, push to the buildcache. Moreover, if pushing to the buildcache fails, it is not fatal.

# While Spack is able to install from buildcache and build from source as a fallback, it can only push to the buildcache no matter which way the package was installed.
# As this is going to be executed in a CI pipeline, we can expect most of the packeges are going to be installed from the buildcache. This means most of the packages would be first pulled and then pushed to the buildcache without changing anything, slowing down the whole process.

# To achieve the expected behavior, we implement it by modifying the "spack install" call in the makefile generated by Spack.
# We first install from the build cache and if it fails, only then we compile the package and push it to the buildcache.

# This script replaces "spack install" call in a makefile, one of these
#
# Spack 0.19
#+$(SPACK) -e '/opt/spack-environment' install $(SPACK_BUILDCACHE_FLAG) $(SPACK_INSTALL_FLAGS) --only-concrete --only=package --no-add /$(notdir $@) # $(SPEC)
#
# Spack 0.20
#+$(SPACK) -e '/opt/spack-environment' install $(SPACK_BUILDCACHE_FLAG) $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) # $(SPEC)
#
# Spack 0.21
#+$(SPACK) -e '/opt/spack-environment' install $(SPACK_BUILDCACHE_FLAG) $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) # $(SPEC)

# with something like this
#
# Spack 0.19
# +$(SPACK) -e '/opt/spack-environment' install --cache-only $(SPACK_INSTALL_FLAGS) --only-concrete --only=package --no-add /$(notdir $@) || \
#   ( $(SPACK) -e '/opt/spack-environment' install --no-cache $(SPACK_INSTALL_FLAGS) --only-concrete --only=package --no-add /$(notdir $@) && \
#     ( $(SPACK) -e '/opt/spack-environment' buildcache create --allow-root --rebuild-index --force -m s3_cscs_buildcache --only=package /$(notdir $@) || true ) ) # $(SPEC)
#
# Spack 0.20
# +$(SPACK) -e '/opt/spack-environment' install --cache-only $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) || \
#   ( $(SPACK) -e '/opt/spack-environment' install --no-cache $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) && \
#     ( $(SPACK) -e '/opt/spack-environment' buildcache create --allow-root --rebuild-index --force -m s3_cscs_buildcache --only=package /$(HASH) || true ) ) # $(SPEC)
#
# Spack 0.21
# +$(SPACK) -e '/opt/spack-environment' install --cache-only $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) || \
#   ( $(SPACK) -e '/opt/spack-environment' install --no-cache $(SPACK_INSTALL_FLAGS) --only-concrete --only=package /$(HASH) && \
#     ( $(SPACK) -e '/opt/spack-environment' buildcache push --update-index --force --only=package s3_cscs_buildcache /$(HASH) || true ) ) # $(SPEC)

spack_out = subprocess.run(["spack", "--version"], capture_output=True, text=True)
spack_version = spack_out.stdout.strip()
spack_version = spack_version.split(".", 2)

match spack_version:
    case ["0", "19", _]:
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package --no-add /\$\(notdir \$@\) (.*)')
    case ["0", "20", _]:
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package /\$\(HASH\) (.*)')
    case ["0", "21", _]:
        install_regex = re.compile(r'\t\+\$\(SPACK\) -e .*--only-concrete --only=package /\$\(HASH\) (.*)')
    case _:
        raise ValueError("Unknown Spack version " + ".".join(spack_version))

found_install = False
for line in fileinput.input():
    match = install_regex.match(line)
    if match:
        found_install = True
        # remove the tab at start of line AND the part at the end of the line (comment for spack-0.19, touch $@ for spack-0.18)
        install_line = match[0].replace(match[1], '|| \\')[2:]
        if install_line.find('$(SPACK_BUILDCACHE_FLAG)') != -1:
            install_line_cache = install_line.replace('$(SPACK_BUILDCACHE_FLAG)', '--cache-only')
            install_line_nocache = install_line.replace('$(SPACK_BUILDCACHE_FLAG)', '--no-cache').replace(' || \\', ' && \\')
        else:
            assert install_line.find(' install ') != -1
            install_line_cache = install_line.replace(' install ', ' install --cache-only ')
            install_line_nocache = install_line.replace(' install ', ' install --no-cache ').replace(' || \\', ' && \\')
        print(f'\t+{install_line_cache}')
        print(f'\t  ( {install_line_nocache}')
        match spack_version:
            case ["0", "19", _]:
                print(f"\t    ( $(SPACK) -e '/opt/spack-environment' buildcache create --allow-root --rebuild-index --force -m s3_cscs_buildcache --only=package /$(notdir $@) || true ) ) # $(SPEC)")
            case ["0", "20", _]:
                print(f"\t    ( $(SPACK) -e '/opt/spack-environment' buildcache create --allow-root --rebuild-index --force -m s3_cscs_buildcache --only=package /$(HASH) || true ) ) # $(SPEC)")
            case ["0", "21", _]:
                print(f"\t    ( $(SPACK) -e '/opt/spack-environment' buildcache push --update-index --force --only=package s3_cscs_buildcache /$(HASH) || true ) ) # $(SPEC)")
            case _:
                raise ValueError("Unknown Spack version " + ".".join(spack_version))
        if match[1].find('touch $@') != -1:
            print('\t@touch $@')
    else:
        sys.stdout.write(line)

exit(0 if found_install else 1)
